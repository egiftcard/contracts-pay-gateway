{"abi":[{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@ds-test/=lib/ds-test/src/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"london","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236","urls":["bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02","dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol","id":42915,"exportedSymbols":{"ReentrancyGuard":[42914]},"nodeType":"SourceUnit","src":"109:3131:25","nodes":[{"id":42847,"nodeType":"PragmaDirective","src":"109:24:25","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":42914,"nodeType":"ContractDefinition","src":"886:2353:25","nodes":[{"id":42851,"nodeType":"VariableDeclaration","src":"1674:40:25","nodes":[],"constant":true,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1699:11:25","scope":42914,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":42850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"id":42854,"nodeType":"VariableDeclaration","src":"1720:36:25","nodes":[],"constant":true,"mutability":"constant","name":"ENTERED","nameLocation":"1745:7:25","scope":42914,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":42853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"id":42856,"nodeType":"VariableDeclaration","src":"1763:23:25","nodes":[],"constant":false,"mutability":"mutable","name":"_status","nameLocation":"1779:7:25","scope":42914,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1763:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":42859,"nodeType":"ErrorDefinition","src":"1850:37:25","nodes":[],"documentation":{"id":42857,"nodeType":"StructuredDocumentation","src":"1793:52:25","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","name":"ReentrancyGuardReentrantCall","nameLocation":"1856:28:25","parameters":{"id":42858,"nodeType":"ParameterList","parameters":[],"src":"1884:2:25"}},{"id":42867,"nodeType":"FunctionDefinition","src":"1893:52:25","nodes":[],"body":{"id":42866,"nodeType":"Block","src":"1907:38:25","nodes":[],"statements":[{"expression":{"id":42864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":42862,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42856,"src":"1917:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42863,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42851,"src":"1927:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":42865,"nodeType":"ExpressionStatement","src":"1917:21:25"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":42860,"nodeType":"ParameterList","parameters":[],"src":"1904:2:25"},"returnParameters":{"id":42861,"nodeType":"ParameterList","parameters":[],"src":"1907:0:25"},"scope":42914,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":42878,"nodeType":"ModifierDefinition","src":"2322:103:25","nodes":[],"body":{"id":42877,"nodeType":"Block","src":"2346:79:25","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":42870,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42894,"src":"2356:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":42871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42872,"nodeType":"ExpressionStatement","src":"2356:21:25"},{"id":42873,"nodeType":"PlaceholderStatement","src":"2387:1:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":42874,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42902,"src":"2398:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":42875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2398:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42876,"nodeType":"ExpressionStatement","src":"2398:20:25"}]},"documentation":{"id":42868,"nodeType":"StructuredDocumentation","src":"1951:366:25","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"name":"nonReentrant","nameLocation":"2331:12:25","parameters":{"id":42869,"nodeType":"ParameterList","parameters":[],"src":"2343:2:25"},"virtual":false,"visibility":"internal"},{"id":42894,"nodeType":"FunctionDefinition","src":"2431:307:25","nodes":[],"body":{"id":42893,"nodeType":"Block","src":"2470:268:25","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":42883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":42881,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42856,"src":"2558:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":42882,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42854,"src":"2569:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2558:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":42888,"nodeType":"IfStatement","src":"2554:86:25","trueBody":{"id":42887,"nodeType":"Block","src":"2578:62:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":42884,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42859,"src":"2599:28:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":42885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:30:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42886,"nodeType":"RevertStatement","src":"2592:37:25"}]}},{"expression":{"id":42891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":42889,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42856,"src":"2714:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42890,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42854,"src":"2724:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":42892,"nodeType":"ExpressionStatement","src":"2714:17:25"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2440:19:25","parameters":{"id":42879,"nodeType":"ParameterList","parameters":[],"src":"2459:2:25"},"returnParameters":{"id":42880,"nodeType":"ParameterList","parameters":[],"src":"2470:0:25"},"scope":42914,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":42902,"nodeType":"FunctionDefinition","src":"2744:208:25","nodes":[],"body":{"id":42901,"nodeType":"Block","src":"2782:170:25","nodes":[],"statements":[{"expression":{"id":42899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":42897,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42856,"src":"2924:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42898,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42851,"src":"2934:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2924:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":42900,"nodeType":"ExpressionStatement","src":"2924:21:25"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2753:18:25","parameters":{"id":42895,"nodeType":"ParameterList","parameters":[],"src":"2771:2:25"},"returnParameters":{"id":42896,"nodeType":"ParameterList","parameters":[],"src":"2782:0:25"},"scope":42914,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":42913,"nodeType":"FunctionDefinition","src":"3131:106:25","nodes":[],"body":{"id":42912,"nodeType":"Block","src":"3195:42:25","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":42910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":42908,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42856,"src":"3212:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":42909,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42854,"src":"3223:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3212:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":42907,"id":42911,"nodeType":"Return","src":"3205:25:25"}]},"documentation":{"id":42903,"nodeType":"StructuredDocumentation","src":"2958:168:25","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3140:23:25","parameters":{"id":42904,"nodeType":"ParameterList","parameters":[],"src":"3163:2:25"},"returnParameters":{"id":42907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42913,"src":"3189:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42905,"name":"bool","nodeType":"ElementaryTypeName","src":"3189:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3188:6:25"},"scope":42914,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":42848,"nodeType":"StructuredDocumentation","src":"135:750:25","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"linearizedBaseContracts":[42914],"name":"ReentrancyGuard","nameLocation":"904:15:25","scope":42915,"usedErrors":[42859],"usedEvents":[]}],"license":"MIT"},"id":25}